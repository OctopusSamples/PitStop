---
###
### Linkerd Namespace
###
---
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd
  annotations:
    linkerd.io/inject: disabled
  labels:
    linkerd.io/is-control-plane: "true"
    config.linkerd.io/admission-webhooks: disabled
    linkerd.io/control-plane-ns: linkerd
---
###
### Identity Controller Service RBAC
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
###
### Controller RBAC
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-controller
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-controller
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-controller
subjects:
- kind: ServiceAccount
  name: linkerd-controller
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-controller
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
---
###
### Destination Controller Service
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
###
### Heartbeat RBAC
###
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
---
###
### Web RBAC
###
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-web
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-web
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-web-check
  labels:
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-web-check
  labels:
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-web-admin
  labels:
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-tap-admin
subjects:
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-web
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
---
###
### Service Profile CRD
###
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: serviceprofiles.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: linkerd.io
  versions:
  - name: v1alpha1
    served: true
    storage: false
  - name: v1alpha2
    served: true
    storage: true
  scope: Namespaced
  names:
    plural: serviceprofiles
    singular: serviceprofile
    kind: ServiceProfile
    shortNames:
    - sp
---
###
### TrafficSplit CRD
### Copied from https://github.com/deislabs/smi-sdk-go/blob/cea7e1e9372304bbb6c74a3f6ca788d9eaa9cc58/crds/split.yaml
###
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: trafficsplits.split.smi-spec.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: split.smi-spec.io
  version: v1alpha1
  scope: Namespaced
  names:
    kind: TrafficSplit
    shortNames:
      - ts
    plural: trafficsplits
    singular: trafficsplit
  additionalPrinterColumns:
  - name: Service
    type: string
    description: The apex service of this split.
    JSONPath: .spec.service
---
###
### Prometheus RBAC
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-prometheus
  labels:
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-prometheus
  labels:
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-prometheus
subjects:
- kind: ServiceAccount
  name: linkerd-prometheus
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-prometheus
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
---
###
### Grafana RBAC
###
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-grafana
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
---
###
### Proxy Injector RBAC
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces", "replicationcontrollers"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
type: Opaque
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lRUUtqa3BPdEFTQWcwa0hZQktDT0FVekFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl3TURRd05UQXpORFV4TjFvWERUSXhNRFF3TlRBek5EVXhOMW93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFOL1poU05pYjlCSk1IUGQ3UW9EQXREOXpRYnk0UHp0M3lzRjBVNEx3SERNWFRlOApaSzVUQXYwQ29TVm44ekg1ZjRyTm16d3dCOVI4SThmRVVDWE9yZzJKM1JiNlhmbFFtQnhmYXN1U3B3UFhUUUt4Ckl6VTR3bHZ1azllcjZWSUFWTXZpamg3Umw2YktERE5XS1E4Q1p6Y21vMmVwV211QjY1WE1pQVZoSEI0Y29naVYKaU1idUFzRU56WHBkK0VkUWVLbGxGemFLMWwzWVdYM1dxaWZpN0NzWXg3djRNQzBsRll6aTVCM21ENVNxWCtqWQpKV1V3WDIxeHprUXAwWVEzQ04zV3hEWTlZbjd5ZHkxMVdKNG91Rlh6U3ZQcDVaaE9CVFUxTHZVcnJ6TFZGZVF5Cm8rL3hkQzVLdDRBMmdsRmk1RExJNk91TmdNQ1hoZjV3aUNvQmh3OENBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC8KQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RQpCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQitxNmo0SUEyWmZqRVJMNWdVMzE1WWt2eG5FQVArCmxGUVc4Q2RMMVFBVEp5MWd6ZXVYUFJQa2JmSmVGdm9lcSt4L09FUWo0RDRoNGFwTmIrT0RGK2Y2S056NTdVTGYKaWxPUFAvdjhsTyttN2NyRCsxMlFnRTFZbGpFZmN0WnZheUJTVUF2R2NLNTc0Mzk3QmF4dHFGa1AwUFM3aVhmQQpzcHFKNjJ6Y2VCVUdkaEVESkZneFprYnhxaXU5cGRQSHVVWU5KZWxNakFieUJaQVNPQVdoWjVHaHBaMmFXVjI5Ckwzd1Q0eUU4OUhFeXorejhnYlpDNmowQWljL2o2OFdwdVkyeGsrR1k5K0w3RlZUeWpPdDBWMTRPcXAyVjlQUmcKdFBHYWRsV2NZZ0dRYldPSGRubllyS0NsYVBmcElMRVJrWG56a0Zmck9Jcnd2VHBqRmdiWWdPZk0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMzltRkkySnYwRWt3YzkzdENnTUMwUDNOQnZMZy9PM2ZLd1hSVGd2QWNNeGRON3hrCnJsTUMvUUtoSldmek1mbC9pczJiUERBSDFId2p4OFJRSmM2dURZbmRGdnBkK1ZDWUhGOXF5NUtuQTlkTkFyRWoKTlRqQ1crNlQxNnZwVWdCVXkrS09IdEdYcHNvTU0xWXBEd0puTnlhalo2bGFhNEhybGN5SUJXRWNIaHlpQ0pXSQp4dTRDd1EzTmVsMzRSMUI0cVdVWE5vcldYZGhaZmRhcUorTHNLeGpIdS9nd0xTVVZqT0xrSGVZUGxLcGY2TmdsClpUQmZiWEhPUkNuUmhEY0kzZGJFTmoxaWZ2SjNMWFZZbmlpNFZmTks4K25sbUU0Rk5UVXU5U3V2TXRVVjVES2oKNy9GMExrcTNnRGFDVVdMa01zam82NDJBd0plRi9uQ0lLZ0dIRHdJREFRQUJBb0lCQUFtT2tkNlczMHMzTkxoZApxemNZTmRDU1pXUjhqaHArVlY3UzJzTElRYWtQTUpPbW1XM1A0WHJIMS9WdTRMVXJmOFIvVHJkZEhaaDJ6RmhGCkMxN3gyZ0I5K0ZCNDAvWkcrSmVOZzFPNXFTUEMxMmpjQXpMTWY0L0pPY3FsYmtxdjlPN1hkMVhkZ09vQUNsRk8KeG1YN3BraDJmOWQzSllNZGd0OWNZaHBJc1JpZjcrR21PMUdFYVBIWGQwTzZtMFNCcDdDWlpFYUx0Q1RXMHFscAp2ZzByKzV6dnhVQUNCdmRXOUM3SXRtZFF5cE5LWXh2Y0MzeDRHcldacnVHN2dwMkhLRTZxZDZrcE1lL1F2UWZCCkZmZkgzQlVGV0lCZUhack5tMHE0TkJkTnZXRlJpOWZuazhtQjZ4TVRITmhVOGVEMEgxMTUzcnhhMS9oOVhxYlQKYjQ2T2tmRUNnWUVBOHUvZktIQjU4c2xLQnM4Z2t1Y2dqcEc4dkszdkN3NnBsam1ka2lFL2NyL2ozVlhSbm1ZMQpzcmpkVHNnOVU2QjBFOFlwUllXeDJTTlBoenpaRnUxejBRMit3cWwwZHBHNjBKMkk5Yk1zZ1VFNFppR1FrMGpNCk83NmJndGZycmd1WTV2bGMxVjBGVmkvNDgrR1FHVnBNbmJ1Q1J4T0tTSG94Nm8wQ2R0UnlRaU1DZ1lFQTYrTG4KVkJtNTYrVnRxNmtPUnVYZDZ2dnRjV212Zm1lZFZVVHJBY3oraDhwcXNtek42Z2tBUTc2SHd4UTVIeUE1WHlURgovYWNyNDZQeDdLK2cySUVCLzNnQmQvb2lIb1dWb1FjSnNKdkVhcHBkRUpUOTFJT01OV1Z5RXFIdWd5a3B4emFsCktRMjc4Q2ZYSzJ5MnJUcWNBcDA1Y0F6dlBvNjh5Ymlhcm9WOXFDVUNnWUJLR2F5QjB6ei9OektqUFE1OGdJOUgKcldCYVZOdHpEZmZnWUphVmVocTJUNTJiWjQvV3R1cHVKMEVweEo0Z0lmTUdEUTJOclNnQVNXcjZueTdBZFpFOApGT3M0eVNOQy8xUnlTWHI3SnJuT2V5eE95cklrbXJIaEQxU3o1bFIyOUFhaGZUSTV5blBVUkRHMWdmbklJZWo0CnU3Y1RJdnlzK3NpNitHUG1Cd3NLN1FLQmdDVlYyN0YzQlBOdWMrWllzcmJNQ1V6NUpRTHZiR1NBZCttWUorNDQKQ1Exckgyb3dTSU5EZTNROWd2V0FqTzM5UnJkbGRhVUpRYXdkTmR4MWkrcll1SDA3L0ZlR0VzSnIrRnZ0Wmo0NgoyV0xhSGVMVEFqNFJ1QzUzYVEvRDY2Rjg4V3pqbkU2Y0t1UC9HbEo0T1kyL21oUGIyTXlBYjVtaU5BVmxuNjRCCjJQcTFBb0dBYWVQazRFZjdrSTQxZk9hWjJiZzV3WVJkdWU0US9WZjdYT3NFU2xqWTZrRlhWNmZ0SllUbkxSMEkKU2JZYjZWN2pGZDNPOVBPUXdET0dJdTBuSndpenZFNzk3aGNHL2tmUUtteHlTZitJVDVzRFQvNU9VakxNb0k4ego3ZERyZWtocTcwOUlONzl6V2piUHI5TmRCYUw5Uzc5eW9yRVhhdUF1ZjlVV3ZRbmF3bmc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lRUUtqa3BPdEFTQWcwa0hZQktDT0FVekFOQmdrcWhraUc5dzBCQVFzRkFEQXQKTVNzd0tRWURWUVFERXlKc2FXNXJaWEprTFhCeWIzaDVMV2x1YW1WamRHOXlMbXhwYm10bGNtUXVjM1pqTUI0WApEVEl3TURRd05UQXpORFV4TjFvWERUSXhNRFF3TlRBek5EVXhOMW93TFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5ClpDMXdjbTk0ZVMxcGJtcGxZM1J2Y2k1c2FXNXJaWEprTG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQKZ2dFUEFEQ0NBUW9DZ2dFQkFOL1poU05pYjlCSk1IUGQ3UW9EQXREOXpRYnk0UHp0M3lzRjBVNEx3SERNWFRlOApaSzVUQXYwQ29TVm44ekg1ZjRyTm16d3dCOVI4SThmRVVDWE9yZzJKM1JiNlhmbFFtQnhmYXN1U3B3UFhUUUt4Ckl6VTR3bHZ1azllcjZWSUFWTXZpamg3Umw2YktERE5XS1E4Q1p6Y21vMmVwV211QjY1WE1pQVZoSEI0Y29naVYKaU1idUFzRU56WHBkK0VkUWVLbGxGemFLMWwzWVdYM1dxaWZpN0NzWXg3djRNQzBsRll6aTVCM21ENVNxWCtqWQpKV1V3WDIxeHprUXAwWVEzQ04zV3hEWTlZbjd5ZHkxMVdKNG91Rlh6U3ZQcDVaaE9CVFUxTHZVcnJ6TFZGZVF5Cm8rL3hkQzVLdDRBMmdsRmk1RExJNk91TmdNQ1hoZjV3aUNvQmh3OENBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC8KQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RQpCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQitxNmo0SUEyWmZqRVJMNWdVMzE1WWt2eG5FQVArCmxGUVc4Q2RMMVFBVEp5MWd6ZXVYUFJQa2JmSmVGdm9lcSt4L09FUWo0RDRoNGFwTmIrT0RGK2Y2S056NTdVTGYKaWxPUFAvdjhsTyttN2NyRCsxMlFnRTFZbGpFZmN0WnZheUJTVUF2R2NLNTc0Mzk3QmF4dHFGa1AwUFM3aVhmQQpzcHFKNjJ6Y2VCVUdkaEVESkZneFprYnhxaXU5cGRQSHVVWU5KZWxNakFieUJaQVNPQVdoWjVHaHBaMmFXVjI5Ckwzd1Q0eUU4OUhFeXorejhnYlpDNmowQWljL2o2OFdwdVkyeGsrR1k5K0w3RlZUeWpPdDBWMTRPcXAyVjlQUmcKdFBHYWRsV2NZZ0dRYldPSGRubllyS0NsYVBmcElMRVJrWG56a0Zmck9Jcnd2VHBqRmdiWWdPZk0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  failurePolicy: Ignore
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Service Profile Validator RBAC
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-sp-validator
  labels:
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-sp-validator
  labels:
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-sp-validator
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-sp-validator
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
type: Opaque
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lSQU1uTkp0MkRFbWQ3anlNZmN5RWcyU013RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakF3TkRBMU1ETTBOVEUzV2hjTk1qRXdOREExTURNME5URTNXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU1XS2lyaHhDVUhROXZPS1FacEJVWlhocnZ3elMrWFlkaUs1T2o0VlRUZ3RCT3FyaDNqNApZQWJnVEpFUVhSUTU5M2NOTkN6ZEdaRWNMbktKS1Jyc3VOcXByZDNEdlNmaFFKYXZvSUdRUEEwd1Mxc3NDbDg4CnFuYzBzNXJjU3NDWWV5RGJ4WkdwWURSNTNnQmFDR2lGZExZd3g3V3FkWStaN0g2OVMzQi9zcWNpbHNkUmVPa1YKMXk5Ykpyd1lMdE9ZQ25vcXB3cmgxYWFTLzl1bHRleDUxazJpRTJIU29Ub0RpZXBZckZIeCtRWE1YMXFLc3JqQQphSnRmcU5UTEJWWUJGOG5naFVjQkxXMTlIc2lGRnNmRTBHaTBYazliVHRxc09QZ2UxMnRiSThLZ3hxRkFuOVZuCmx1YXp4ZG4vL0l6cTJ5TEE5VHhPSnJValB1WkdKNExnQmhFQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUUQKQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBRApBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBeWQvZHppUHFydXdTRDNmK01SV1pZV0tsWmY0OG5TR3BUCmU1bmVSc3kzMnhvVWoxSUVQSTlHMXJ6M2tZSDEyeHpGSjZxckFQTXdsT2lDV2ZiTDYzQXZBalpMbFN4Y1NXam4KTWV6dXRUZ3VzT20zNktUK0o0KzdqeFdDUHNVd3R6MXdKTDd2OUk5YXVCT204bTY1eG54cmxDd2JRUytidUtoZAowOGdScXRlRXFsc1VEU1ZsWkdaRGY4bjZYL3dTUjR0TnUvenRIS0NGUHdxc0crMWswTEpaUDVUTEY2S1NQQkswClVmUW5ycjRRU1YvcGNSdjNWSXhqNDJmazBGSjA1bnBrM2g0K3FuUUtMb1J3NjlabEtuUGVTeCtaQytvZ1FPZDMKV05WSGU5YUxtN2dPQmZVZzlGOGpOUlMxbGoyRGdYUjV3STkvNlV5QnBIZVFaRjB1YktGTQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeFlxS3VIRUpRZEQyODRwQm1rRlJsZUd1L0ROTDVkaDJJcms2UGhWTk9DMEU2cXVICmVQaGdCdUJNa1JCZEZEbjNkdzAwTE4wWmtSd3Vjb2twR3V5NDJxbXQzY085SitGQWxxK2dnWkE4RFRCTFd5d0sKWHp5cWR6U3ptdHhLd0poN0lOdkZrYWxnTkhuZUFGb0lhSVYwdGpESHRhcDFqNW5zZnIxTGNIK3lweUtXeDFGNAo2UlhYTDFzbXZCZ3UwNWdLZWlxbkN1SFZwcEwvMjZXMTdIbldUYUlUWWRLaE9nT0o2bGlzVWZINUJjeGZXb3F5CnVNQm9tMStvMU1zRlZnRVh5ZUNGUndFdGJYMGV5SVVXeDhUUWFMUmVUMXRPMnF3NCtCN1hhMXNqd3FER29VQ2YKMVdlVzVyUEYyZi84ak9yYklzRDFQRTRtdFNNKzVrWW5ndUFHRVFJREFRQUJBb0lCQVFDcnF0Y2NyQmJJWEltUApZWEhiVkxKSzEwS1RKeHpwRkhDdGdseU1BVVVHOFpDWlF4Rksza1hORS9WV0IydHNIV2Zoek5hdnVrRHlxeFB1Ck15WkdvTHVRUXU2Mmp0aitKREZXQWpBeENDQTNzZVY2eU00R3I1alFXVHRQOCtyK2JrUnFiTExILy9KOENBQVcKUENlY2RZWFVvcFdiV1JRckJDL1NnRHhqK29WTjJpYmRZMUp3eWs3MDY1RDFIaDNXbzE0NkptZmR5NFhwbEtJcQpaV1RReFBybUcvajJXRnpPUGc3N1NUNFN0ZjM3cFRPb0VvdU5yVjdCQ1NxVXcyaEV5YVJOeUJMMTA2cm5BZTZWCmVraGRWdCtYcWV5bVFZaXdOdGg5ZklZMWk1dzJ3UWFHbXoyblJCK1ZHc1I3aVJ0OVVJckdGZWhyQk94UE9qc0EKeGlzZTY1UUJBb0dCQU1pMGt0Z1c1VW95NFF5cWtJQ0c5WkxaaTJSK2ZFRU90WDlHbWhONDlzQ3hpekxzWllqeAp1V2tHTlZYa1N3RlJWcE9vTVlUekJJTXpIY1JTMnRlYnF6Tm1xWlczUnBrZWNRUnAyeUM5MHpWTXVZa0VhQTAwCnVHbWlsVVF2Y1o2NjNDaThrRmd2UDFONjNnRGdaVTB2RC9UODZxVWF2Mk1OWEJzbmlldWdLUFhSQW9HQkFQdjIKemFSZDl4dEtVNjMvaVZTb2NWZS9QUjg1OEtIdkNIWWxGQi9pMlJabFhCQUFER2g3bDBLelZMNkxjY0Rod0JHUgp0dGRuM2RsU3N6WXRKVk9iRms1dlJLL2NFN09jNnhONUE0bHZGblNuR0lDNWFaT3NSandlZVhHMTR6VzRWMnBqCk5EMng2c0tHQWVsYkRCbmhsVjc0QkdrcDZHRFkyTDdJeVFKT0d0eEJBb0dBR0xrdHNaSzRjZmhzZ292c092amsKL1U3dy9kTWE2VVN2bE5zVWxidDc0ZWE4OSt2bzRnS3N6VVFuZzhvWWR6UVd6eCtUNGdXeGs1dlRXZUMrOW5wRgpqNUpnNTRGcEgrbUJFSU1kckIzV0M2WEU0Uno2MkUyYlBkLzZOU2tHL1ArVnFTcjVPUE94QUU2TlZGeFAvajhDCjN6SGNrYlFHeVdQVzZiMW9IdTlldkZFQ2dZQTdOZmVEZmRWNUkxRmczV0UvZE1vVjdjb0dVWTViNzVsVWNrZzEKYWhETDg0dmI4cmIzd3J0OElEcDFBTDM5cnM5OUVYb2ZTcmhXdnRtQWpNRnQwVTgvcFdSRjAza0p4NEZ5dFFpQQp2b3RQWklrY2p2WGhqeVYrTVVjbTByQ1BTais0cjVGeVFpSkNEazNhc2R1NUpVcjk0MWplQWN3ckhpcHBRelFCCmg2dEdRUUtCZ1FDK09IVGFpSU5NUHllRnFpYVRTUUJ6VldIR0ZtQkJYL2U1SmhkdnlxM1RwTEMvQVB2a2pkTEwKaEdsMC9HeFl3UGRiTGJCdlVFamdlU29QbVZoc3ZqVkViWW9raG8yR3o0Y0piRHBTVWxab0szZytiNlpIdjFvaAprclRLWXZUK3Mxa2dVRnZDMjNQU0pWYTExSUFEdGoyQVJ5TTNsNmhvT1A4MFExaXdTUEQ0Y2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-sp-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lSQU1uTkp0MkRFbWQ3anlNZmN5RWcyU013RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakF3TkRBMU1ETTBOVEUzV2hjTk1qRXdOREExTURNME5URTNXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQU1XS2lyaHhDVUhROXZPS1FacEJVWlhocnZ3elMrWFlkaUs1T2o0VlRUZ3RCT3FyaDNqNApZQWJnVEpFUVhSUTU5M2NOTkN6ZEdaRWNMbktKS1Jyc3VOcXByZDNEdlNmaFFKYXZvSUdRUEEwd1Mxc3NDbDg4CnFuYzBzNXJjU3NDWWV5RGJ4WkdwWURSNTNnQmFDR2lGZExZd3g3V3FkWStaN0g2OVMzQi9zcWNpbHNkUmVPa1YKMXk5Ykpyd1lMdE9ZQ25vcXB3cmgxYWFTLzl1bHRleDUxazJpRTJIU29Ub0RpZXBZckZIeCtRWE1YMXFLc3JqQQphSnRmcU5UTEJWWUJGOG5naFVjQkxXMTlIc2lGRnNmRTBHaTBYazliVHRxc09QZ2UxMnRiSThLZ3hxRkFuOVZuCmx1YXp4ZG4vL0l6cTJ5TEE5VHhPSnJValB1WkdKNExnQmhFQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUUQKQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBRApBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBeWQvZHppUHFydXdTRDNmK01SV1pZV0tsWmY0OG5TR3BUCmU1bmVSc3kzMnhvVWoxSUVQSTlHMXJ6M2tZSDEyeHpGSjZxckFQTXdsT2lDV2ZiTDYzQXZBalpMbFN4Y1NXam4KTWV6dXRUZ3VzT20zNktUK0o0KzdqeFdDUHNVd3R6MXdKTDd2OUk5YXVCT204bTY1eG54cmxDd2JRUytidUtoZAowOGdScXRlRXFsc1VEU1ZsWkdaRGY4bjZYL3dTUjR0TnUvenRIS0NGUHdxc0crMWswTEpaUDVUTEY2S1NQQkswClVmUW5ycjRRU1YvcGNSdjNWSXhqNDJmazBGSjA1bnBrM2g0K3FuUUtMb1J3NjlabEtuUGVTeCtaQytvZ1FPZDMKV05WSGU5YUxtN2dPQmZVZzlGOGpOUlMxbGoyRGdYUjV3STkvNlV5QnBIZVFaRjB1YktGTQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  failurePolicy: Ignore
  rules:
  - operations: [ "CREATE" , "UPDATE" ]
    apiGroups: ["linkerd.io"]
    apiVersions: ["v1alpha1", "v1alpha2"]
    resources: ["serviceprofiles"]
  sideEffects: None
---
###
### Tap RBAC
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-tap
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-tap-admin
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-tap
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-tap
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-tap-auth-delegator
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-tap
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-tap-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
type: Opaque
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lSQU5uMDdOdU1CbGNXNlI0dlRSdmxKeWt3RFFZSktvWklodmNOQVFFTEJRQXcKSWpFZ01CNEdBMVVFQXhNWGJHbHVhMlZ5WkMxMFlYQXViR2x1YTJWeVpDNXpkbU13SGhjTk1qQXdOREExTURNMApOVEUyV2hjTk1qRXdOREExTURNME5URTJXakFpTVNBd0hnWURWUVFERXhkc2FXNXJaWEprTFhSaGNDNXNhVzVyClpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTEIzbjFLRHJkemYKRFB2M3VVcm5MbE1oeTM0N0lUVmxsZlpIclc5Z0VUbG9nbHR2OURVSGdYZ25qdUszc040ZUpNOGpNU0FrNUxDaAoveTU5MXBzS1FTaE4xWmcxSnF1L09HeTlROVk2VWtZejFwZzZEclhnZ1lqVU1KMmQrNG04TkVyYlVDRDFVNzh6CmRPdFphbTFvbUZ5TGtOQUZYdUY3aEo4MEs4VkFab2dzTElJUWliMWNQTmpEdnVMOUsxMThvQmFRUzVlRGdEVjkKTUYxYmJkWkVCU2UvZzIzUi9BaFhCenZLUXBJWE5LQVVuSVNMekgzQmVlZ1JFZ242Z2VEM3V6cXFwWlYremg4dwpWdkVlamlNNjRjSUs4enY5NHFBbmZobHMxd004WHFwQ3p0SHJKcjE1L0dCemVnV2gyLy9LeFQyTVhkYWlNbnNpCmc2UHhLbSswZ1lzQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0cKQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBaFV5MVcvWEwwQmlPNjB6YSs2ckZwbzhZS2UzbWRvT1ZJZEV4Y2JHUEg4RGFTS0xIeGk3VmJvTHQwCkVqUGcvemdKcERvL01JdHJHdy9EMGxna1ZJc2ZzNVRJR28rUE5lcXh2YlRha0xlUUdmTE51bFY2TCtrbitKN0sKNG1qOVRaV2Y4a0czY3pMUndIZ2ovdFdtRCtjSXVhbStPL2Zvcko1MzZQOVZ1UkV5SE5VUzc4Z3BGZWtzYjYxWApqcEJUYk16VXl0S05ud1dkQ3NSRnY3cEc1OHJZMmxHN1lpM2RzMEUyUktRVmJFQmJFdG5oVG55QUtyRVFpVVlyCjh4T0ZJZUlhQUZYeStmYllEVW1ybUxyRzdJa2JVbFd2K0V0L2lydmNDMmNoWEdoUkkzTzRQMnBrTVNzOUQwWVYKMlo5YmlpTmFhNkgwV0RHWUNHcTJySEQyeG5VTwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc0hlZlVvT3QzTjhNKy9lNVN1Y3VVeUhMZmpzaE5XV1Y5a2V0YjJBUk9XaUNXMi8wCk5RZUJlQ2VPNHJldzNoNGt6eU14SUNUa3NLSC9MbjNXbXdwQktFM1ZtRFVtcTc4NGJMMUQxanBTUmpQV21Eb08KdGVDQmlOUXduWjM3aWJ3MFN0dFFJUFZUdnpOMDYxbHFiV2lZWEl1UTBBVmU0WHVFbnpRcnhVQm1pQ3dzZ2hDSgp2Vnc4Mk1PKzR2MHJYWHlnRnBCTGw0T0FOWDB3WFZ0dDFrUUZKNytEYmRIOENGY0hPOHBDa2hjMG9CU2NoSXZNCmZjRjU2QkVTQ2ZxQjRQZTdPcXFsbFg3T0h6Qlc4UjZPSXpyaHdncnpPLzNpb0NkK0dXelhBenhlcWtMTzBlc20KdlhuOFlITjZCYUhiLzhyRlBZeGQxcUl5ZXlLRG8vRXFiN1NCaXdJREFRQUJBb0lCQUhySFlBU3JOYWE5VW0xbApXSGh6RE5vdVkwVTZvc3BpR2NxMjZFYmJrbUJkQklYV0NSVjBXWEplSTU0K3JFSit1cUdjSEt2K3YxYmQvNHc3ClpidU5rUFFYNDRyNVFDU3k4UEZIWmhHQmxvamR2R3RCeWNabG8vcXRsLzJ5VTdiclNYN2p4SWFKNm5EWHZudVoKUk9GR3F1dUk5NEtrbWZWTVdXUGppcWk5UEJsMWF1TXYyN211QndwTFFkeTE5NEJVZkNzWnovMHcreUp0MGNIOQovT2kram9wZmNCeDVBbkYxVStvZjM0cklMYTkyL2pSZVJMZ2o0RmViay9FWCtSVjVTVFVRRE84UjhTMGlWaGRJCkZCd3Yvbm0wOGw0YXZLZlQ4RlJsbmhwMUhVSU94SEp1QkY5bHNVZVZSMEZSR0xMUVdiOWtWRXVKUDYyQkQwckIKUURzaTVqRUNnWUVBMHFqNFpzZ2VZZWV6emt6b3Vidm1BT29TUTdEWkttM2VJZklxcHVIaFQ5YXN3dlllalgwQQo2Z3g1UE1teUdPaEcvamI1N01zL3BORTFtVzJEbHBXdjFKVGdyVmtMQVdOVDJSTkF6bitvVUlnSlRyUkJmVkNCClZvbkpadjlrRWVQSTl5c3lkQlFlMEV0SVVHZkdFQXdGdWVueW8ybUpGaEs5YU9xcENONFZHZjBDZ1lFQTFuS3YKZzlGeVJDRUhiWHRTdWo2aGtSdFM3ZlVaa0RwTjg0ekJEeU9TTE9ncU40Q0lEOXpIUjJza3VrL2JuNFZXbGhONApkL3p0UGZwcWNtdWtxYzBNR3VSa2NPYzQvbzltSDkvZ0N1bnJQRXVnbFNRa3dzN21KUzNDWkZOZXQvZkNDZ25QCm1ZTktlNVhCUmNObnFOb3NoZ1hEZ0ErVDlMTUp6T3dONU82emZDY0NnWUFid1kyeEpTN3pvVzdNZ00rdElUZkYKNlJGcy85RXRTUHFhcUdpOFFraklselYrSHFXWjZOMkUrUTNFVjZMeXF6QW5jS0R2ZFR3MmdDWTZ4L1l0a2gxdgp1Z244YlI0SkdjaERjc2o0TEZQR0FKYVJXeWpCMVNpbGVWUWpFUVZqWWdycG5qUnduUElPYWN6bVl6WHlpVkw3CjB2cFlVNkJ2V3hxL3h5TnNlcTUzRlFLQmdRQ1lFaGZZdUV2NWVCcVdUcCtwcHdSWHJES3d2K0J5NElXcXNpT3QKb3FIajZuY1ZpTFh6MmJJUE9UR0FWV1QreUVWUWcxb29iRm1vVzgza2VlVDQ3SWtyQU04aEtUYkhmZFVEd1hSVgpDUEJoZjVmT2F5VU9hRDNZRzQwQUxBYTlHcHFsRjdQNXZwcXc3TTl6czAvczgxb2phQzdzdng5Q3BUdkw3NUVpCnlRcktmUUtCZ0ZJZXdCWklpQkdSalkrdmc4UkFFazNkZU1PRVF4UTJpY2s4Y2tVaThKaFN4V2hQd0FJTEVoejUKOVRHOERkNm8zZnJjVERBVXJlNGlQRk11RERWWjhNR1l4REdnR29vOE9KdnhoUjFpc1FMenFRdFpKc0tWTmV2aApWbkxQbXgzL2pobTJCbkVwYXZHZG5sV0hiNVhFejN0MWVvWnRjSE5VZkNMTU1wUzZDTGk1Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: linkerd-tap
    namespace: linkerd
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lSQU5uMDdOdU1CbGNXNlI0dlRSdmxKeWt3RFFZSktvWklodmNOQVFFTEJRQXcKSWpFZ01CNEdBMVVFQXhNWGJHbHVhMlZ5WkMxMFlYQXViR2x1YTJWeVpDNXpkbU13SGhjTk1qQXdOREExTURNMApOVEUyV2hjTk1qRXdOREExTURNME5URTJXakFpTVNBd0hnWURWUVFERXhkc2FXNXJaWEprTFhSaGNDNXNhVzVyClpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTEIzbjFLRHJkemYKRFB2M3VVcm5MbE1oeTM0N0lUVmxsZlpIclc5Z0VUbG9nbHR2OURVSGdYZ25qdUszc040ZUpNOGpNU0FrNUxDaAoveTU5MXBzS1FTaE4xWmcxSnF1L09HeTlROVk2VWtZejFwZzZEclhnZ1lqVU1KMmQrNG04TkVyYlVDRDFVNzh6CmRPdFphbTFvbUZ5TGtOQUZYdUY3aEo4MEs4VkFab2dzTElJUWliMWNQTmpEdnVMOUsxMThvQmFRUzVlRGdEVjkKTUYxYmJkWkVCU2UvZzIzUi9BaFhCenZLUXBJWE5LQVVuSVNMekgzQmVlZ1JFZ242Z2VEM3V6cXFwWlYremg4dwpWdkVlamlNNjRjSUs4enY5NHFBbmZobHMxd004WHFwQ3p0SHJKcjE1L0dCemVnV2gyLy9LeFQyTVhkYWlNbnNpCmc2UHhLbSswZ1lzQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0cKQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBaFV5MVcvWEwwQmlPNjB6YSs2ckZwbzhZS2UzbWRvT1ZJZEV4Y2JHUEg4RGFTS0xIeGk3VmJvTHQwCkVqUGcvemdKcERvL01JdHJHdy9EMGxna1ZJc2ZzNVRJR28rUE5lcXh2YlRha0xlUUdmTE51bFY2TCtrbitKN0sKNG1qOVRaV2Y4a0czY3pMUndIZ2ovdFdtRCtjSXVhbStPL2Zvcko1MzZQOVZ1UkV5SE5VUzc4Z3BGZWtzYjYxWApqcEJUYk16VXl0S05ud1dkQ3NSRnY3cEc1OHJZMmxHN1lpM2RzMEUyUktRVmJFQmJFdG5oVG55QUtyRVFpVVlyCjh4T0ZJZUlhQUZYeStmYllEVW1ybUxyRzdJa2JVbFd2K0V0L2lydmNDMmNoWEdoUkkzTzRQMnBrTVNzOUQwWVYKMlo5YmlpTmFhNkgwV0RHWUNHcTJySEQyeG5VTwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
###
### Control Plane PSP
###
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: linkerd-linkerd-control-plane
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  allowedCapabilities:
  - NET_ADMIN
  - NET_RAW
  requiredDropCapabilities:
  - ALL
  hostNetwork: false
  hostIPC: false
  hostPID: false
  seLinux:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  volumes:
  - configMap
  - emptyDir
  - secret
  - projected
  - downwardAPI
  - persistentVolumeClaim
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-psp
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ['policy', 'extensions']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - linkerd-linkerd-control-plane
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-psp
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-controller
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-grafana
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-prometheus
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-sp-validator
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-smi-metrics
  namespace: linkerd
---
###
### SMI-Metrics RBAC
###
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    linkerd.io/control-plane-component: smi-metrics
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-smi-metrics
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-smi-metrics
  labels:
    linkerd.io/control-plane-component: smi-metrics
    linkerd.io/control-plane-ns: linkerd
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: linkerd-smi-metrics
  namespace: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-smi-metrics-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: smi-metrics
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lSQUxQY0hWZ3pxQzRYRCsvK0ZjbGFpbTR3RFFZSktvWklodmNOQVFFTEJRQXcKS2pFb01DWUdBMVVFQXhNZmJHbHVhMlZ5WkMxemJXa3RiV1YwY21samN5NXNhVzVyWlhKa0xuTjJZekFlRncweQpNREEwTURVd016UTFNVGRhRncweU1UQTBNRFV3TXpRMU1UZGFNQ294S0RBbUJnTlZCQU1USDJ4cGJtdGxjbVF0CmMyMXBMVzFsZEhKcFkzTXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURUM0VibExTeWtDVlRlL1lWbGk2WGplNlVTZWdVNytEeExGS1NNeGhSZERaTE5Ud3h2bnRmaQo5azdyQVorMnpsWWp5RDdqTXZ6VG5QQnFqOXZWeHdWSEVQdHdhcVo1Ukd0NnBGYTNqY0laZGw4WTJkdkJUSEo0CnBjRnBrVC9rZzlraDAxdFR0eUtQTXhxNEFma0tFSEpjaUpOWEFtZEU5L2wxRW9ZdkY4WTJWc3hVKy9BbVRSQTgKQUpCNXZOOVNNVWJjeCsxNzUybU1yeFJrUjRxWWduWFk4NG9DUWV5bSt0a21zUGR5TXZNeXlaekVISU94TmcwUgpWRGY5dkhYSFBMMTEyUzV6YWFhRWNHOHVBK3NhZ3FPNytVQWNOd21ZMGhNdVlscHlhWDBCRXQrTUxPdGRwWUpHCmg5S3VZOW8vdjN0dTBWNGU5K0xoSmtteGQ4R0g2VjlkQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUMKcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQgovekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBTmtIUUR3ZDV4Snp0RWFMTzVpMENDa3dqY0h3NDc3cUVaRS9nCmdUQ2tCYjNsRVhQRCtxL2czZzhSL2hYbnNCeWdINmlub3VaVXpLRW5DTmNFYTBUM0UrditKR0VwdGs0Vy8xTCsKcHFyUGhpMStlT3NDSWQ3U1lsL2RZNFdBdnRBQkpCa0xHZC9XVXM5azhGL1pqTEZsQkJ3Tk9YWTl3ZkxteDVwSAoweDBrWDZCRXlBTSs5YzlLRE5EWGFyS3dSTWt1VGpFVGlTQUkrNnhDMjl3amU2cDhEWHU3VWZtQk4yYUNpRng5CmozN1Z4b3oydFJ4SDV1TklTbVBORVc0dW5sZmkwV2Q0dFhGL3N6WnZ1OXZ0ZjdhNTMrREt6OUJsZE42YUptYnQKeG5xbnZ1TlJ4TkRIZ2hVRXM4YTNIUFRHTTBJVXcrcmxBSmJuWG5IeWJpUXY5L2pUTnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMDl4RzVTMHNwQWxVM3YyRlpZdWw0M3VsRW5vRk8vZzhTeFNrak1ZVVhRMlN6VThNCmI1N1g0dlpPNndHZnRzNVdJOGcrNHpMODA1endhby9iMWNjRlJ4RDdjR3FtZVVScmVxUld0NDNDR1haZkdObmIKd1V4eWVLWEJhWkUvNUlQWklkTmJVN2NpanpNYXVBSDVDaEJ5WElpVFZ3Sm5SUGY1ZFJLR0x4ZkdObGJNVlB2dwpKazBRUEFDUWViemZVakZHM01mdGUrZHBqSzhVWkVlS21JSjEyUE9LQWtIc3B2clpKckQzY2pMek1zbWN4QnlECnNUWU5FVlEzL2J4MXh6eTlkZGt1YzJtbWhIQnZMZ1ByR29LanUvbEFIRGNKbU5JVExtSmFjbWw5QVJMZmpDenIKWGFXQ1JvZlNybVBhUDc5N2J0RmVIdmZpNFNaSnNYZkJoK2xmWFFJREFRQUJBb0lCQUh1MzA5SzdLYWwxSlpHKwpuS3FxL1NtMXA3VDllcGNGcERmNEN3dUdGSmd1ZC83YTNabEZPaTc0eFNjcFlKcEJMajVoRHBCZzB4SEVRUVVKCmswZm9tK1ZmUG1Yc2NlQzVHc2FZdDJjaktpanlYaUJHQUxXRnJnZFVUSGtZY0NaQzlJWnpSWTdDa0RUdGsvbkcKZFNieWFjWXRuMVVkT3k4a1hCR0l5c0V2Y2ZtQ2I3ZFJqU0N2ZjIxYXdGcVdPR1d1L2s5eXBsZCt4WkM5b3NUNwp0Z2RXcW9xMjZKeXVVU2JyemJnaEh3cVZBNGduT1FHSTJzQWFobXJEUms3cFlxbFY3T3BlNUs3V3VDOXhKdnlQCmZmbWlveUJmdUtyRG9zeXlaYXdWR2dFaE5CbVZJVmgzTlJZOVJIaVV3RWRXeVpYa3c0UllvOUxpRGd1UERBV2IKUlkvWlV3RUNnWUVBMkJGQkU3WDlsNU1SUk1nWlJwM1Z3clVMbndkNFZBV3lQL1gzanBxTFYzYWtteG1HQkFZZQpLMGhOeDhLT01OVVgxM29McTZzTTNqRWRhUlMyWkRXM1JQblo0cXgvQlYyZmQvWUZzNThza25EY3JsR1Yvb2VaCm1hdUdYbnkvekhPM1p2N0JUOUN3VEx1ZlhML0M1VEt3VU4vRGVMWThlZTJOQU1JTTgxYmFQNTBDZ1lFQSt3UDcKREF6bjJXRVBDMVhmcFI3RnVmV3VWMGlVUk1NM0c5M2tCengxRUFVWG1UZWlCQ09palkrRVVyZ1hjMUFKYmtXZQpVdXJNNnBXaDNGajBnWHg4bm9ZRTA5c2ZLTDFIakVFditVQjdKMXFteDdxL1BhelF1VUZrN0hXWFdtcm1aNS82Cm45ZVE3WEsyUW5jZXdxYUdtdEN2NHNiYkVmU0kzYW54SFpJaDhzRUNnWUVBbUVVQW9jMTkzQlpPOHpRNWErVEwKd3A0b2hIaVZPbEdSWHpZT3NyY0RRQzVpcnRONytOWCs2TzNac3MvUHVXWlRtUTF2c0JtcHhlVERIMHp6aFFlKwpFcVFxQTI4aFRUeS9wNkVBUDZnTGwyQm1oWXNGdEEwSUdKNGk0ZS8wa3pkeHB1b2VmZ3RLVTZsZUU5VW9tckh3ClErNk9LVUgwdU5ES3NDQVJWR1IvQnBrQ2dZQUhuemxTUmxvTDZieVJOWXhTOFRwRHlVZi84bjQrRUVkdUd6Qy8KWDRDV2VmRWJmK3IxZ1RlQVlPazlzY1ZVaFF1a1E0enBLNlFKUTMza3VQYkRyOG9BN2tUYlFmNFNPSjBoanlFcgp5bDl5OUhlMy9OMnR1Nytpd0crV0ZvUUFCTnIyTG85bnB4NEpkOEE5Q0d6d3NDbktMYWdKbE13MklWeStqbGg1CjgyUUFnUUtCZ0VrbnBCZVRGbFJrbk5ENnJERENCejZ5TFV4UDJXamZEdmg5RDJmQ2tNWk9yeWxHcWo5cVN3TzcKZjlvSnRmMktLOS80MEswUWJZZlMraXNhSU9RZjFWMkFvL05BWXRDbVNoZSttWEt5L2ZXUE9pYVpUTk0zSmJSQwpUOTl1WTI3VVkxM2RNcTVXZHpWcGZMa2JZUjA1NkpTWm1SV09ZRXdBMktiRUpxL3pTK0pLCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.metrics.smi-spec.io
  labels:
    linkerd.io/control-plane-component: smi-metrics
    linkerd.io/control-plane-ns: linkerd
spec:
  group: metrics.smi-spec.io
  version: v1alpha1
  insecureSkipTLSVerify: false
  groupPriorityMinimum: 100
  versionPriority: 100
  service:
    name: linkerd-smi-metrics
    namespace: linkerd
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lSQUxQY0hWZ3pxQzRYRCsvK0ZjbGFpbTR3RFFZSktvWklodmNOQVFFTEJRQXcKS2pFb01DWUdBMVVFQXhNZmJHbHVhMlZ5WkMxemJXa3RiV1YwY21samN5NXNhVzVyWlhKa0xuTjJZekFlRncweQpNREEwTURVd016UTFNVGRhRncweU1UQTBNRFV3TXpRMU1UZGFNQ294S0RBbUJnTlZCQU1USDJ4cGJtdGxjbVF0CmMyMXBMVzFsZEhKcFkzTXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURUM0VibExTeWtDVlRlL1lWbGk2WGplNlVTZWdVNytEeExGS1NNeGhSZERaTE5Ud3h2bnRmaQo5azdyQVorMnpsWWp5RDdqTXZ6VG5QQnFqOXZWeHdWSEVQdHdhcVo1Ukd0NnBGYTNqY0laZGw4WTJkdkJUSEo0CnBjRnBrVC9rZzlraDAxdFR0eUtQTXhxNEFma0tFSEpjaUpOWEFtZEU5L2wxRW9ZdkY4WTJWc3hVKy9BbVRSQTgKQUpCNXZOOVNNVWJjeCsxNzUybU1yeFJrUjRxWWduWFk4NG9DUWV5bSt0a21zUGR5TXZNeXlaekVISU94TmcwUgpWRGY5dkhYSFBMMTEyUzV6YWFhRWNHOHVBK3NhZ3FPNytVQWNOd21ZMGhNdVlscHlhWDBCRXQrTUxPdGRwWUpHCmg5S3VZOW8vdjN0dTBWNGU5K0xoSmtteGQ4R0g2VjlkQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUMKcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEd1lEVlIwVEFRSC9CQVV3QXdFQgovekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBTmtIUUR3ZDV4Snp0RWFMTzVpMENDa3dqY0h3NDc3cUVaRS9nCmdUQ2tCYjNsRVhQRCtxL2czZzhSL2hYbnNCeWdINmlub3VaVXpLRW5DTmNFYTBUM0UrditKR0VwdGs0Vy8xTCsKcHFyUGhpMStlT3NDSWQ3U1lsL2RZNFdBdnRBQkpCa0xHZC9XVXM5azhGL1pqTEZsQkJ3Tk9YWTl3ZkxteDVwSAoweDBrWDZCRXlBTSs5YzlLRE5EWGFyS3dSTWt1VGpFVGlTQUkrNnhDMjl3amU2cDhEWHU3VWZtQk4yYUNpRng5CmozN1Z4b3oydFJ4SDV1TklTbVBORVc0dW5sZmkwV2Q0dFhGL3N6WnZ1OXZ0ZjdhNTMrREt6OUJsZE42YUptYnQKeG5xbnZ1TlJ4TkRIZ2hVRXM4YTNIUFRHTTBJVXcrcmxBSmJuWG5IeWJpUXY5L2pUTnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
data:
  global: |
    {"linkerdNamespace":"linkerd","cniEnabled":false,"version":"edge-20.4.1","identityContext":{"trustDomain":"cluster.local","trustAnchorsPem":"-----BEGIN CERTIFICATE-----\nMIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0\neS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1\nMDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j\nYWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs\nOmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw\nQDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC\nMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa\nyShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm\nkyyYsGXfZw==\n-----END CERTIFICATE-----\n","issuanceLifetime":"86400s","clockSkewAllowance":"20s","scheme":"linkerd.io/tls"},"autoInjectContext":null,"omitWebhookSideEffects":false,"clusterDomain":"cluster.local"}
  proxy: |
    {"proxyImage":{"imageName":"gcr.io/linkerd-io/proxy","pullPolicy":"IfNotPresent"},"proxyInitImage":{"imageName":"gcr.io/linkerd-io/proxy-init","pullPolicy":"IfNotPresent"},"controlPort":{"port":4190},"ignoreInboundPorts":[],"ignoreOutboundPorts":[],"inboundPort":{"port":4143},"adminPort":{"port":4191},"outboundPort":{"port":4140},"resource":{"requestCpu":"","requestMemory":"","limitCpu":"","limitMemory":""},"proxyUid":"2102","logLevel":{"level":"warn,linkerd=info"},"disableExternalProfiles":true,"proxyVersion":"edge-20.4.1","proxyInitImageVersion":"v1.3.2","debugImage":{"imageName":"gcr.io/linkerd-io/debug","pullPolicy":"IfNotPresent"},"debugImageVersion":"edge-20.4.1"}
  install: |
    {"cliVersion":"edge-20.4.1","flags":[]}
---
###
### Identity Controller Service
###
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-identity-issuer
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
    linkerd.io/identity-issuer-expiry: 2021-04-05T03:45:26Z
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJnekNDQVNtZ0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQXBNU2N3SlFZRFZRUURFeDVwWkdWdWRHbDAKZVM1c2FXNXJaWEprTG1Oc2RYTjBaWEl1Ykc5allXd3dIaGNOTWpBd05EQTFNRE0wTlRBMldoY05NakV3TkRBMQpNRE0wTlRJMldqQXBNU2N3SlFZRFZRUURFeDVwWkdWdWRHbDBlUzVzYVc1clpYSmtMbU5zZFhOMFpYSXViRzlqCllXd3dXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBVHVuNGE3YWN5RmFFOWw4OHhaRlppdzFZcnMKT21RKzNjcGRudHorcUNQRHZGVi9FWFNSSXJjNEkvSlFINmZrdUxmYVZzMG1pOXNkWXl4MTNJdmZVWjJ2bzBJdwpRREFPQmdOVkhROEJBZjhFQkFNQ0FRWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFPNFN6cUhKS0ltbE5Md2EKeVNoeHNxNlA3K3BSa3pGUW41eU9HalJ4SW11cEFpQjNCQXRoWWYvZUQ5Z0V1eEFFaW9yWnAwSE9WelUvbTlGbQpreXlZc0dYZlp3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  key.pem: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU9janJOVi9GVm1vYzMxSFlvKy9tMkhzaG8wVGtQOXROU1hMMHNiL21Kc3ZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFN3ArR3Uybk1oV2hQWmZQTVdSV1lzTldLN0Rwa1B0M0tYWjdjL3Fnanc3eFZmeEYwa1NLMwpPQ1B5VUIrbjVMaTMybGJOSm92YkhXTXNkZHlMMzFHZHJ3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQ==
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - identity
        - -log-level=info
        image: gcr.io/linkerd-io/controller:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-identity
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Controller
###
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-controller-api
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: controller
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: controller
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-controller
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: controller
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-controller
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: controller
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-controller
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - public-api
        - -prometheus-url=http://linkerd-prometheus.linkerd.svc.cluster.local:9090
        - -destination-addr=linkerd-dst.linkerd.svc.cluster.local:8086
        - -controller-namespace=linkerd
        - -log-level=info
        image: gcr.io/linkerd-io/controller:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: public-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-controller
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Destination Controller Service
###
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        image: gcr.io/linkerd-io/controller:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-destination
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Heartbeat
###
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    app.kubernetes.io/name: heartbeat
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  schedule: "55 3 * * * "
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            linkerd.io/control-plane-component: heartbeat
          annotations:
            linkerd.io/created-by: linkerd/cli edge-20.4.1
        spec:
          nodeSelector:
            beta.kubernetes.io/os: linux
          serviceAccountName: linkerd-heartbeat
          restartPolicy: Never
          containers:
          - name: heartbeat
            image: gcr.io/linkerd-io/controller:edge-20.4.1
            imagePullPolicy: IfNotPresent
            args:
            - "heartbeat"
            - "-prometheus-url=http://linkerd-prometheus.linkerd.svc.cluster.local:9090"
            - "-controller-namespace=linkerd"
            - "-log-level=info"
            securityContext:
              runAsUser: 2103
---
###
### Web
###
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-web
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-web
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: web
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-web
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: web
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-web
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -grafana-addr=linkerd-grafana.linkerd.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|linkerd-web\.linkerd\.svc\.cluster\.local|linkerd-web\.linkerd\.svc|\[::1\])(:\d+)?$
        image: gcr.io/linkerd-io/web:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-web
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Prometheus
###
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-prometheus-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
data:
  prometheus.yml: |-
    global:
      scrape_interval: 10s
      scrape_timeout: 10s
      evaluation_interval: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: (.*);admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-prometheus
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-prometheus
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: prometheus
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-prometheus
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: prometheus
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-prometheus
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        - --config.file=/etc/prometheus/prometheus.yml
        - --log.level=info
        image: prom/prometheus:v2.15.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        securityContext:
          runAsUser: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus
          name: prometheus-config
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_OUTBOUND_ROUTER_CAPACITY
          value: "10000"
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-prometheus
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          name: linkerd-prometheus-config
        name: prometheus-config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Grafana
###
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-grafana-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
data:
  grafana.ini: |-
    instance_name = linkerd-grafana

    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/

    [auth]
    disable_login_form = true

    [auth.anonymous]
    enabled = true
    org_role = Editor

    [auth.basic]
    enabled = false

    [analytics]
    check_for_updates = false

    [panels]
    disable_sanitize_html = true

  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://linkerd-prometheus.linkerd.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-grafana
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-grafana
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: grafana
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-grafana
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: grafana
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-grafana
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        image: gcr.io/linkerd-io/grafana:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: linkerd-grafana-config
        name: grafana-config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Proxy Injector
###
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - proxy-injector
        - -log-level=info
        image: gcr.io/linkerd-io/controller:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-tls
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
###
### Service Profile Validator
###
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: sp-validator
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: sp-validator
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-sp-validator
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: sp-validator
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: sp-validator
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-sp-validator
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - sp-validator
        - -log-level=info
        image: gcr.io/linkerd-io/controller:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-sp-validator
      volumes:
      - name: tls
        secret:
          secretName: linkerd-sp-validator-tls
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Tap
###
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-tap
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
  labels:
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-tap
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: tap
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-tap
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: tap
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-tap
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - tap
        - -controller-namespace=linkerd
        - -log-level=info
        image: gcr.io/linkerd-io/controller:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        - mountPath: /var/run/linkerd/config
          name: config
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-tap
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
      - name: tls
        secret:
          secretName: linkerd-tap-tls
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: smi-metrics
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: smi-metrics
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-smi-metrics
  namespace: linkerd
data:
  config.yml: |
    mesh: linkerd
    linkerd:
      prometheusUrl: http://linkerd-prometheus.linkerd.svc.cluster.local:9090
      resourceQueries:
        p99_response_latency : |-
          histogram_quantile(
                            0.99,
                            sum(
                              irate(
                                response_latency_ms_bucket{
                                  namespace=~"{{default ".+" .namespace }}",
                                  {{lower .kind}}=~"{{default ".+" .name }}"
                                }[{{.window}}]
                              )
                            ) by (
                              {{lower .kind}},
                              namespace,
                              le
                            )
                          )
        p90_response_latency : |-
          histogram_quantile(
                            0.90,
                            sum(
                              irate(
                                response_latency_ms_bucket{
                                  namespace=~"{{default ".+" .namespace }}",
                                  {{lower .kind}}=~"{{default ".+" .name }}"
                                }[{{.window}}]
                              )
                            ) by (
                              {{lower .kind}},
                              namespace,
                              le
                            )
                          )
        p50_response_latency : |-
          histogram_quantile(
                            0.50,
                            sum(
                              irate(
                                response_latency_ms_bucket{
                                  namespace=~"{{default ".+" .namespace }}",
                                  {{lower .kind}}=~"{{default ".+" .name }}"
                                }[{{.window}}]
                              )
                            ) by (
                              {{lower .kind}},
                              namespace,
                              le
                            )
                          )
        success_count : |-
          sum(
                    increase(
                      response_total{
                        classification="success",
                        namespace=~"{{default ".+" .namespace }}",
                        {{lower .kind}}=~"{{default ".+" .name }}"
                      }[{{.window}}]
                    )
                  ) by (
                    {{lower .kind}},
                    namespace
                  )
        failure_count : |-
          sum(
                    increase(
                      response_total{
                        classification="failure",
                        namespace=~"{{default ".+" .namespace }}",
                        {{lower .kind}}=~"{{default ".+" .name }}"
                      }[{{.window}}]
                    )
                  ) by (
                    {{lower .kind}},
                    namespace
                  )
      edgeQueries:
        p99_response_latency : |-
          histogram_quantile(
                            0.99,
                            sum(
                              irate(
                                response_latency_ms_bucket{
                                  namespace=~"{{.namespace}}",
                                  {{lower .kind}}=~"{{default ".+" .fromName}}",
                                  dst_{{lower .kind}}=~"{{default ".+" .toName}}"
                                }[{{.window}}]
                              )
                            ) by (
                              {{lower .kind}},
                              dst_{{lower .kind}},
                              namespace,
                              dst_namespace,
                              le
                            )
                          )
        p90_response_latency : |-
          histogram_quantile(
                            0.90,
                            sum(
                              irate(
                                response_latency_ms_bucket{
                                  namespace=~"{{.namespace}}",
                                  {{lower .kind}}=~"{{default ".+" .fromName}}",
                                  dst_{{lower .kind}}=~"{{default ".+" .toName}}"
                                }[{{.window}}]
                              )
                            ) by (
                              {{lower .kind}},
                              dst_{{lower .kind}},
                              namespace,
                              dst_namespace,
                              le
                            )
                          )
        p50_response_latency : |-
          histogram_quantile(
                            0.50,
                            sum(
                              irate(
                                response_latency_ms_bucket{
                                  namespace=~"{{.namespace}}",
                                  {{lower .kind}}=~"{{default ".+" .fromName}}",
                                  dst_{{lower .kind}}=~"{{default ".+" .toName}}"
                                }[{{.window}}]
                              )
                            ) by (
                              {{lower .kind}},
                              dst_{{lower .kind}},
                              namespace,
                              dst_namespace,
                              le
                            )
                          )
        success_count : |-
          sum(
                    increase(
                      response_total{
                        classification="success",
                        namespace=~"{{.namespace}}",
                        {{lower .kind}}=~"{{default ".+" .fromName}}",
                        dst_{{lower .kind}}=~"{{default ".+" .toName}}"
                      }[{{.window}}]
                    )
                  ) by (
                    {{lower .kind}},
                    dst_{{lower .kind}},
                    namespace,
                    dst_namespace
                  )
        failure_count : |-
          sum(
                    increase(
                      response_total{
                        classification="failure",
                        namespace=~"{{.namespace}}",
                        {{lower .kind}}=~"{{default ".+" .fromName}}",
                        dst_{{lower .kind}}=~"{{default ".+" .toName}}"
                      }[{{.window}}]
                    )
                  ) by (
                    {{lower .kind}},
                    dst_{{lower .kind}},
                    namespace,
                    dst_namespace
                  )
    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: linkerd-smi-metrics
  namespace: linkerd
  labels:
    app.kubernetes.io/name: smi-metrics
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-20.4.1
    linkerd.io/control-plane-component: smi-metrics
    linkerd.io/control-plane-ns: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: smi-metrics
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-sp-validator
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-20.4.1
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: edge-20.4.1
      labels:
        linkerd.io/control-plane-component: smi-metrics
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-sp-validator
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      serviceAccountName: linkerd-smi-metrics
      containers:
      - name: shim
        image: deislabs/smi-metrics:v0.2.1
        imagePullPolicy: IfNotPresent

        command:
        - /smi-metrics
        - --config=/config.yml

        ports:
        - containerPort: 8080
          name: api
          protocol: TCP
        - containerPort: 8081
          name: admin
          protocol: TCP

        volumeMounts:
        - name: config
          mountPath: /config.yml
          subPath: config.yml
        - mountPath: /var/run/smi-metrics
          name: tls
          readOnly: true

      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            -----BEGIN CERTIFICATE-----
            MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
            eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDA1MDM0NTA2WhcNMjEwNDA1
            MDM0NTI2WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
            YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATun4a7acyFaE9l88xZFZiw1Yrs
            OmQ+3cpdntz+qCPDvFV/EXSRIrc4I/JQH6fkuLfaVs0mi9sdYyx13IvfUZ2vo0Iw
            QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIhAO4SzqHJKImlNLwa
            yShxsq6P7+pRkzFQn5yOGjRxImupAiB3BAthYf/eD9gEuxAEiorZp0HOVzU/m9Fm
            kyyYsGXfZw==
            -----END CERTIFICATE-----
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        image: gcr.io/linkerd-io/proxy:edge-20.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.3.2
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: config
        configMap:
          name: linkerd-smi-metrics
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
      - name: tls
        secret:
          secretName: linkerd-smi-metrics-tls
---
apiVersion: v1
kind: Service
metadata:
  name: linkerd-smi-metrics
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: smi-metrics
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-20.4.1
spec:
  ports:
    - port: 443
      targetPort: api
      protocol: TCP
  selector:
    linkerd.io/control-plane-component: smi-metrics
